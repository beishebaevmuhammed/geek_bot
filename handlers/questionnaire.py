
from aiogram import types, Dispatcher
from config import bot
from keyboards import inline_buttons


async def start_questionnaire_call(call: types.CallbackQuery):
    await bot.send_message(
        chat_id=call.from_user.id,
        text="–ö–∞–∫–æ–π —è–∑—ã–∫ –¢—ã –≤—ã–±–µ—Ä–µ—à—å?",
        reply_markup=await inline_buttons.start_1questionnaire_keyboard()
    )


async def question1_call(call: types.CallbackQuery):
    await bot.send_message(
        chat_id=call.from_user.id,
        text="–û, –∫–ª–∞—Å—Å–Ω–æüòç "
             "–¢–æ–≥–¥–∞ –¥–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º –Ω–æ—É—Ç–±—É–∫: ",
        reply_markup=await inline_buttons.start_2questionnaire_keyboard()
    )


async def question2_call(call: types.CallbackQuery):
    await bot.send_message(
        chat_id=call.from_user.id,
        text="–°—É–ø–µ—Äüëç "
             "–¢–æ–≥–¥–∞ –¥–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º –Ω–æ—É—Ç–±—É–∫: ",
        reply_markup=await inline_buttons.start_2questionnaire_keyboard()
    )


async def question3_call(call: types.CallbackQuery):
    await bot.send_message(
        chat_id=call.from_user.id,
        text="–ú–æ–ª–æ–¥–µ—Üüëç "
             "–¢–æ–≥–¥–∞ –¥–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º –Ω–æ—É—Ç–±—É–∫: ",
        reply_markup=await inline_buttons.start_2questionnaire_keyboard()
    )


async def question6_call(call: types.CallbackQuery):
    await bot.send_message(
        chat_id=call.from_user.id,
        text="–°–º–æ—Ç—Ä—é –Ω–µ–ø–ª–æ—Ö–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—åüòè "
             "–ò –≥–¥–µ –¢—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–µ –≤—Ä–µ–º—è?",
        reply_markup=await inline_buttons.start_3questionnaire_keyboard()
    )


async def question7_call(call: types.CallbackQuery):
    await bot.send_message(
        chat_id=call.from_user.id,
        text="–¢–≤–æ—Ä—á–µ—Å–∫–∏–π —á–µ–ª–æ–≤–µ–∫üôÇ "
             "–ò –≥–¥–µ –¢—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–µ –≤—Ä–µ–º—è?",
        reply_markup=await inline_buttons.start_3questionnaire_keyboard()
    )


async def question8_call(call: types.CallbackQuery):
    await bot.send_message(
        chat_id=call.from_user.id,
        text="–í—ã–±—Ä–∞–ª –Ω–æ—É—Ç–±—É–∫ —á–∏—Å—Ç–æ –¥–ª—è —É—á–µ–±—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—èüëç "
             "–ò –≥–¥–µ –¢—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–µ –≤—Ä–µ–º—è?",
        reply_markup=await inline_buttons.start_3questionnaire_keyboard()
    )


async def question9_call(call: types.CallbackQuery):
    await bot.send_message(
        chat_id=call.from_user.id,
        text="–î–µ–ª–æ–≤–æ–π —Ç–∞–∫–æ–πüòé ",
    )


async def question10_call(call: types.CallbackQuery):
    await bot.send_message(
        chat_id=call.from_user.id,
        text="–°–µ—Å—Å–∏–∏ –Ω–∞—á–∞–ª–∏—Å—åü´† ",
    )


async def question11_call(call: types.CallbackQuery):
    await bot.send_message(
        chat_id=call.from_user.id,
        text="–û–æ–æ, –∏–∑ –Ω–∞—à–∏—Ö –∑–Ω–∞—á–∏—Ç, —Ä–µ—Å–ø–µ–∫—Çü§ù",
    )


def register_questionnaire_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(start_questionnaire_call,
                                       lambda call: call.data == "Start_questionnaire")
    dp.register_callback_query_handler(question1_call,
                                       lambda call: call.data == "python")
    dp.register_callback_query_handler(question2_call,
                                       lambda call: call.data == "javaScript")
    dp.register_callback_query_handler(question3_call,
                                       lambda call: call.data == "c++")
    dp.register_callback_query_handler(question6_call,
                                       lambda call: call.data == "Macbook Pro 14 M2 MAX")
    dp.register_callback_query_handler(question7_call,
                                       lambda call: call.data == "Acer Swift 3X")
    dp.register_callback_query_handler(question8_call,
                                       lambda call: call.data == "Asus Chromebook Flip CX5")
    dp.register_callback_query_handler(question9_call,
                                       lambda call: call.data == "–í –∫–æ—Ñ–µ–π–Ω–µ")
    dp.register_callback_query_handler(question10_call,
                                       lambda call: call.data == "–í —É–Ω–∏–≤–µ—Ä–µ")
    dp.register_callback_query_handler(question11_call,
                                       lambda call: call.data == "–í geeks")
